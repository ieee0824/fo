package main

import (
    "fmt"
    "errors"
    "strconv"
    "strings"
)

type Stack[T] struct {
    vs []T
    p int
}

func (s *Stack[T]) Push(t T) {
    if len(s.vs) == s.p {
        panic(errors.New("stack overflow"))
    }
    s.vs[s.p] = t
    s.p ++
}

func (s *Stack[T]) Pop() T {
    if s.p == 0 {
        panic(errors.New("stack underflow"))
    }
    s.p --
    return s.vs[s.p]
}

func Calc(rpn []string) int {
    s := Stack[string]{
        vs: make([]string, 256),
    }
    var ax, bx int

    for _, v := range rpn {
        switch(v) {
            case "+":
                ax, _ = strconv.Atoi(s.Pop())
                bx, _ = strconv.Atoi(s.Pop())
                ax += bx
                s.Push(strconv.Itoa(ax))
            case "-":
                ax, _ = strconv.Atoi(s.Pop())
                bx, _ = strconv.Atoi(s.Pop())
                ax -= bx
                s.Push(strconv.Itoa(ax))
            case "*":
                ax, _ = strconv.Atoi(s.Pop())
                bx, _ = strconv.Atoi(s.Pop())
                ax *= bx
                s.Push(strconv.Itoa(ax))
            case "/":
                ax, _ = strconv.Atoi(s.Pop())
                bx, _ = strconv.Atoi(s.Pop())
                ax /= bx
                s.Push(strconv.Itoa(ax))
            default:
                s.Push(v)
        }
    }
    ax, _ = strconv.Atoi(s.Pop())
    return ax
}

func main() {
    fmt.Println(Calc(strings.Split("1 2 3 + *", " ")))
}