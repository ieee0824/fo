package main

import (
    "fmt"
    "errors"
    "strconv"
)

var op = map[rune] int {
    '*': 0,
    '/': 0,
    '+': 1,
    '-': 1,
}

type RPN []string

type Stack[T] struct {
    vs []T
    p int
}

func (s *Stack[T]) Push(t T) {
    if len(s.vs) == s.p {
        panic(errors.New("stack overflow"))
    }
    s.vs[s.p] = t
    s.p ++
}

func (s *Stack[T]) Pop() T {
    if s.p == 0 {
        panic(errors.New("stack underflow"))
    }
    s.p --
    return s.vs[s.p]
}

func (s *Stack[T]) Len() int {
    return s.p
}

func (s *Stack[T]) Top() T {
    if s.p == 0 {
        panic("stack is empty")
    }
    return s.vs[s.p-1]
}

func calcRpn(rpn RPN) int {
    s := Stack[string]{
        vs: make([]string, 256),
    }
    var ax, bx int

    for _, v := range rpn {
        switch(v) {
            case "+":
                ax, _ = strconv.Atoi(s.Pop())
                bx, _ = strconv.Atoi(s.Pop())
                ax += bx
                s.Push(strconv.Itoa(ax))
            case "-":
                ax, _ = strconv.Atoi(s.Pop())
                bx, _ = strconv.Atoi(s.Pop())
                ax -= bx
                s.Push(strconv.Itoa(ax))
            case "*":
                ax, _ = strconv.Atoi(s.Pop())
                bx, _ = strconv.Atoi(s.Pop())
                ax *= bx
                s.Push(strconv.Itoa(ax))
            case "/":
                ax, _ = strconv.Atoi(s.Pop())
                bx, _ = strconv.Atoi(s.Pop())
                ax /= bx
                s.Push(strconv.Itoa(ax))
            default:
                s.Push(v)
        }
    }
    ax, _ = strconv.Atoi(s.Pop())
    return ax
}

func parseFormula(s string) RPN {
    rpn := RPN{}
    var buffer string
    stack := Stack[rune]{
        vs: make([]rune, 256),
    }


    for i, token := range s {
        switch (token) {
            case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
                if buffer == "" {
                    buffer = string([]rune{token})
                } else {
                    buffer += string([]rune{token})
                }
                if i == len(s) - 1 {
                    rpn = append(rpn, buffer)
                }
            case '+', '-', '*', '/':
                rpn = append(rpn, buffer)
                buffer = ""
                if stack.Len() == 0 || op[token] < op[stack.Top()] {
                    stack.Push(token)
                } else {
                    for {
                        rpn = append(rpn, string([]rune{stack.Pop()}))
                        if stack.Len() == 0 || op[token] > op[stack.Top()] {
                            stack.Push(token)
                            break
                        }
                    }
                }
            case ' ':
            default:
                panic("unsupported token")
        }
    }

    for {
        rpn = append(rpn, string([]rune{stack.Pop()}))
        if stack.Len() == 0 {
            break
        }
    }


    return rpn
}

func Calc(f string) int {
    rpn := parseFormula(f)
    return calcRpn(rpn)
}

func main() {
    fmt.Println(Calc("1+2*3"))
}